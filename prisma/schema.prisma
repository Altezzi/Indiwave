generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./prod.db"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum UserRole {
  USER
  CREATOR
  REVIEWER
  UPLOAD_TEAM
  MODERATOR
  SENIOR_MOD
  ADMIN
}

model User {
  id              String         @id @default(cuid())
  accountId       Int?           @unique
  email           String         @unique
  emailVerified   DateTime?
  name            String?
  username        String?        @unique
  password        String?
  image           String?
  role            UserRole       @default(USER)
  isCreator       Boolean        @default(false)
  isSilenced      Boolean        @default(false)
  silencedUntil   DateTime?
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  profilePicture  String?
  cropSettings    String?
  themePreference String?        @default("default")
  accounts        Account[]
  sessions        Session[]
  auditLogs       AuditLog[]
  createdSeries   Series[]       // Series created by user
  createdVolumes  Volume[]       // Volumes created by user
  createdChapters Chapter[]      // Chapters created by user
  comments        Comment[]
  creatorClaims   CreatorClaim[]
  libraryEntries  LibraryEntry[]
  ratings         Rating[]
  userUrls        UserUrl[]

  @@map("users")
}

// Main Series model - simplified and clean
model Series {
  id            String    @id @default(cuid())
  title         String
  description   String?
  coverImage    String?
  isPublished   Boolean   @default(false)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  creatorId     String
  creator       User      @relation(fields: [creatorId], references: [id])
  
  // Series metadata
  contentRating String?
  tags          String?
  authors       String?
  artists       String?
  altTitles     String?
  
  // Volume relationship
  volumes       Volume[]
  
  // Relationships
  chapters      Chapter[]      // Chapters within this series/season
  comments      Comment[]
  creatorClaims CreatorClaim[]
  libraryEntries LibraryEntry[]
  ratings       Rating[]
  userUrls      UserUrl[]

  @@map("series")
}

// Volume model for organizing series into volumes
model Volume {
  id            String    @id @default(cuid())
  title         String
  volumeNumber  Int
  description   String?
  coverImage    String?
  isPublished   Boolean   @default(false)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  // Relationships
  seriesId      String
  series        Series    @relation(fields: [seriesId], references: [id], onDelete: Cascade)
  chapters      Chapter[]
  creatorId     String
  creator       User      @relation(fields: [creatorId], references: [id])

  @@unique([seriesId, volumeNumber])
  @@map("volumes")
}

// Chapter model for individual chapters within series or volumes
model Chapter {
  id            String    @id @default(cuid())
  title         String
  chapterNumber Int
  pages         String?   // Chapter pages/content
  isPublished   Boolean   @default(false)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  // Can belong to either a Series (main series) or a Volume
  seriesId      String?   // Points to the parent Series (null if belongs to volume)
  volumeId      String?   // Points to the parent Volume (null if belongs to main series)
  
  creatorId     String
  creator       User      @relation(fields: [creatorId], references: [id])
  series        Series?   @relation(fields: [seriesId], references: [id], onDelete: Cascade)
  volume        Volume?   @relation(fields: [volumeId], references: [id], onDelete: Cascade)
  comments      Comment[]

  @@map("chapters")
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  isHidden  Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  seriesId  String?  // Optional - for series-level comments
  chapterId String?  // Optional - for chapter-level comments
  series    Series?  @relation(fields: [seriesId], references: [id], onDelete: Cascade)
  chapter   Chapter? @relation(fields: [chapterId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id])

  @@map("comments")
}

model UserUrl {
  id        String   @id @default(cuid())
  url       String
  label     String
  seriesId  String?  // Points to Series
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  series    Series?  @relation(fields: [seriesId], references: [id], onDelete: Cascade)

  @@map("user_urls")
}

model LibraryEntry {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  seriesId  String
  status    String?  @default("READING")
  rating    Int?
  notes     String?
  user      User     @relation(fields: [userId], references: [id])
  series    Series   @relation(fields: [seriesId], references: [id], onDelete: Cascade)

  @@unique([userId, seriesId])
  @@map("library_entries")
}

model Rating {
  id        String   @id @default(cuid())
  rating    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  seriesId  String
  series    Series   @relation(fields: [seriesId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id])

  @@unique([userId, seriesId])
  @@map("ratings")
}

model CreatorClaim {
  id         String   @id @default(cuid())
  status     String   @default("pending")
  evidence   String?
  notes      String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  claimantId String
  seriesId   String
  claimant   User     @relation(fields: [claimantId], references: [id])
  series     Series   @relation(fields: [seriesId], references: [id], onDelete: Cascade)

  @@map("creator_claims")
}

model AuditLog {
  id        String   @id @default(cuid())
  action    String
  target    String?
  details   String?
  createdAt DateTime @default(now())
  actorId   String
  actor     User     @relation(fields: [actorId], references: [id])

  @@map("audit_logs")
}